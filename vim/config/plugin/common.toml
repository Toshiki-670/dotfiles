# statusline ------------------
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['fugitive', 'filename'],
        \   ],
        \   'right': [
        \     ['lineinfo', 'syntastic'],
        \     ['fileencoding', 'filetype', 'fileformat'],
        \   ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \   'syntastic': 'SyntasticStatuslineFlag',
        \ }
        \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '[RO]' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let branch = fugitive#head()
      return strlen(branch) ? branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
'''

# Color schema ----------------
[[plugins]]
repo = 'sjl/badwolf'
# repo = 'altercation/vim-colors-solarized'
hook_add = '''
syntax enable
set background=dark
colorscheme badwolf
let g:molokai_original = 1
" highlight LineNr ctermfg=darkcyan
'''


# Syntax ----------------------
# [[plugins]]
# repo = 'cespare/vim-toml'
# on_ft = ['toml']

# Nerd Tree -------------------
# [[plugins]]
# repo = 'scrooloose/nerdtree'
# hook_add = '''
# set ttimeoutlen=50
# let g:NERDTreeShowBookmarks=1
# noremap <Space>t :NERDTreeToggle<Enter>
# '''
#
# # [[plugins]]
# # repo = 'jistr/vim-nerdtree-tabs'
# # hook_add = '''
# # let g:nerdtree_tabs_open_on_console_startup=1
# # noremap tree :NERDTreeTabsToggle<Enter>
# # '''
#
#
# [[plugins]]
# repo = 'Xuyuanp/nerdtree-git-plugin'
# hook_add = '''
# let g:NERDTreeIndicatorMapCustom = {
#     \ "Modified"  : "*",
#     \ "Staged"    : "+",
#     \ "Untracked" : "~",
#     \ "Renamed"   : "*",
#     \ "Unmerged"  : "!",
#     \ "Deleted"   : "-",
#     \ "Dirty"     : "*",
#     \ "Clean"     : "@",
#     \ 'Ignored'   : "_",
#     \ "Unknown"   : "?"
#     \ }
# '''

# Defx.nvim --------------------
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
noremap <Space>t :<C-u>Defx<Enter>

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit') . "<C-w>L"
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select')
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
endfunction

call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ 'root_icon': ' ',
      \ })

call defx#custom#column('filename', {
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })

call defx#custom#column('mark', {
      \ 'readonly_icon': '✗',
      \ 'selected_icon': '✓',
      \ })

'''


# Git -------------------------
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap [git] <Nop>
nmap     <Space>g [git]
noremap <silent> [git]a :Gwrite<Enter>
noremap <silent> [git]c :Gcommit<Enter>
noremap <silent> [git]r :Gread<Enter>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
set updatetime=250
'''

# Indent ----------------------
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_char = '|'
let g:indentLine_color_term = 239
'''

# Comment ---------------------
# [[plugins]]
# repo = 'tomtom/tcomment_vim'

# Cheatsheet ------------------
[[plugins]]
repo = 'reireias/vim-cheatsheet'
hook_add = '''
let g:cheatsheet#cheat_file = '~/dotfiles/vim/cheatsheet/common.md'
noremap <Space>ch :Cheat<Enter>
'''

