#!/bin/bash
# # Reference
# - [GitHubでFork/cloneしたリポジトリを本家リポジトリに追従する](https://qiita.com/xtetsuji/items/555a1ef19ed21ee42873)

# Constant
readonly CMDNAME=${0##*/}
readonly TRUE='true'
readonly FALSE='false'

readonly REPOSITORY="upstream"
readonly UPSTREAM_PATH="${REPOSITORY}/master"


# It's not necessary to running as root.
if [[ ${EUID:-${UID}} -eq 0 ]]; then
  echo "${CMDNAME}: Running this script as root is no supported." 1>&2
  exit 4
fi


# Check installed the required shell.
if ! type "git" > /dev/null 2>&1; then
  echo "${CMDNAME}: Git command not found." 1>&2
  exit 8
fi


function usage() {
  cmdname_space=$(echo $CMDNAME | sed -e "s/./ /g")

  cat << __USAGE_TEXT__
Usage:
  $CMDNAME
  $CMDNAME [-i <remote_url>]
  $cmdname_space [-h]
__USAGE_TEXT__
}

function description() {
  cat << __DESCRIPTION_TEXT__
Description:
  Upstream merger.

Example:
  $ ${CMDNAME} -m
  $ ${CMDNAME} -i https://github.com/toshiki670/dotfiles.git

Options:
  -i Initialize
  -h Show help
__DESCRIPTION_TEXT__
}

function show_help() {
  usage
  echo
  description
}


# Option analysis
is_initialize=$FALSE
while getopts mi:h OPT
do
  case $OPT in
    "i" ) is_initialize=$TRUE ; remote_url=$OPTARG ;;
    "h" ) show_help >&1
          exit 0
          ;;
    # Invalid options
      * ) usage 1>&2
          exit 16 ;;
  esac
done
# Trim options from $*
shift $(($OPTIND - 1))


function has_upstream() {
  [[ $(git remote | grep $REPOSITORY) == $REPOSITORY ]]
}


function merge() {
  # Check exist upstream REPOSITORY in git's remote list.
  if ! has_upstream; then
    {
      echo "${CMDNAME}: Git hasn't \`${REPOSITORY}' REPOSITORY."
      echo "${CMDNAME}: Please command below:"
      echo "${CMDNAME}: $ ${CMDNAME} -i <remote_url>"
    } >&1
    return 32
  fi

  # Fetch & Merge
  if ! git fetch ${REPOSITORY}; then
    return $?
  fi
  if ! git merge ${UPSTREAM_PATH}; then
    return $?
  fi
  return 0
}


function initialize() {
  if has_upstream; then
    echo "${CMDNAME}: Already nitialized." 1>&2
    return 64
  fi

  if ! git remote add ${REPOSITORY} ${remote_url}; then
    return $?
  fi
  if ! git fetch ${REPOSITORY}; then
    return $?
  fi
  return 0
}


if [[ $is_initialize == $TRUE ]]; then
  initialize
  exit $?
elif [[ $is_initialize == $FALSE ]]; then
  merge
  exit $?
else
  echo "${0##*/}: Unknown error." 1>&2
  exit 128
fi
