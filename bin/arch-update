#!/bin/bash


# Constant
readonly CMDNAME=${0##*/}
readonly TRUE=1
readonly FALSE=0


function usage() {
cmdname_space=$(echo $CMDNAME | sed -e "s/./ /g")

  cat << __USAGE_TEXT__
Usage:
  $CMDNAME
  $CMDNAME [-A] [-p] [-R]
  $CMDNAME [-g] [-n]
  $CMDNAME [-h]
__USAGE_TEXT__
}

function description() {
  cat << '__DESCRIPTION_TEXT__'
Description:
  Archlinux full update tool.

Options:
  -A All update. (Alias to arch-update)
  -p pacman and pkgfile update.
  -R Remove cached package by using paccache.
  -g gem update.
  -n Neovim update.
  -h Show help.
__DESCRIPTION_TEXT__
}

function show_help() {
  usage
  echo
  description
}


# Option analysis
while getopts ApRgnh OPT
do
  case $OPT in
    "A" )  ;;
    "p" )  ;;
    "R" )  ;;
    "g" )  ;;
    "n" )  ;;
    "h" ) show_help >&1
          exit 0
          ;;
    # Invalid options
      * ) usage 1>&2
          exit 1 ;;
  esac
done
# Trim options from $*
shift $(($OPTIND - 1))


function all_update() {
  # Only root user
  if [[ ${EUID:-${UID}} -ne 0 ]]; then
    echo "${CMDNAME}:  Permission denied." 1>&2
    return 1
  fi


  if type '/usr/sbin/pacman' > /dev/null 2>&1; then
    /usr/sbin/pacman -Syu
  fi


  if type '/usr/sbin/paccache' > /dev/null 2>&1; then
    /usr/sbin/paccache -r
    /usr/sbin/paccache -ruk0
  fi


  # `Command not found' hook
  if type 'pkgfile' > /dev/null 2>&1; then
    pkgfile --update
  fi


  if type '/usr/sbin/gem' > /dev/null 2>&1; then
    /usr/sbin/gem update
  fi


  echo 'Success!'
  return 0
}


all_update
exit $?
